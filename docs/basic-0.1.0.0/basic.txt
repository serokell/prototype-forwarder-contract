-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/basic#readme</a>
@package basic
@version 0.1.0.0

module Lorentz.Contracts.Forwarder

-- | We need the addresses of: - The sub-token contract, assumed to accept
--   <a>Parameter</a> - The Tezos Wallet to process refunds (assuming this
--   contract is authorized to call it) - The central wallet to transfer
--   sub-tokens to
data Storage
Storage :: ContractAddr Parameter -> ContractAddr RefundParameters -> Address -> Storage
[subTokenContract] :: Storage -> ContractAddr Parameter
[tezosWallet] :: Storage -> ContractAddr RefundParameters
[centralWallet] :: Storage -> Address

-- | What's required to refund mutez from the Tezos Wallet
type RefundParameters = ("amount" :! Mutez, "to" :! Address)

-- | The number of sub-tokens to transfer
type Parameter = Natural

-- | <a>coerce_</a> to <a>TransferParams</a>
toTransferParams :: (Address & (Address & (Natural & s))) :-> (TransferParams & s)

-- | Run <a>TransferParams</a> with a <tt><a>ContractAddr</a>
--   <a>Parameter</a></tt>, from <a>Address</a>, to <a>Address</a>, and
--   number of sub-tokens
runTransferParams :: (ContractAddr Parameter & (Address & (Address & (Natural & s)))) :-> (Operation & s)

-- | Run <a>TransferParams</a> on the given <a>Parameter</a> and
--   <a>Storage</a>, where from is <a>sender</a> and to is
--   <a>centralWallet</a>
runStorageTransferParams :: (Parameter & (Storage & s)) :-> (Operation & (Storage & s))

-- | Derive <a>RefundParameters</a> and transfer arguments from the number
--   of <a>Mutez</a> to refund and <a>Storage</a>
toRefundParameters :: (Mutez & (Storage & s)) :-> (RefundParameters & (Mutez & (ContractAddr RefundParameters & (Storage & s))))

-- | Process a refund, given the refund amount in <a>Mutez</a> and
--   <a>Storage</a>
processRefund :: (Mutez & (Storage & s)) :-> (Operation & (Storage & s))

-- | Given a method to calculate the number of <a>Mutez</a> to refund from
--   the number of sub-tokens transferred, produce a forwarder contract.
forwarderContract :: (forall s. (Natural & s) :-> (Mutez & s)) -> Contract Parameter Storage
instance Michelson.Typed.Haskell.Value.IsoValue Lorentz.Contracts.Forwarder.Storage
instance GHC.Generics.Generic Lorentz.Contracts.Forwarder.Storage
instance GHC.Show.Show Lorentz.Contracts.Forwarder.Storage
instance GHC.Classes.Eq Lorentz.Contracts.Forwarder.Storage
instance GHC.Show.Show Lorentz.Contracts.ManagedLedger.Athens.Parameter
instance (GHC.Show.Show a, GHC.Show.Show r) => GHC.Show.Show (Lorentz.Macro.View a r)
instance GHC.Show.Show a => GHC.Show.Show (Michelson.Typed.Haskell.Value.ContractAddr a)
